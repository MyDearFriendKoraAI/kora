generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String          @id @default(cuid())
  email             String          @unique
  nome              String
  cognome           String
  phone             String?
  bio               String?
  avatarUrl         String?
  tier              UserTier        @default(FREE)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  conversations     Conversation[]
  subscription      Subscription?
  teams             Team[]
  assistantTeams    TeamAssistant[]
  sentInvites       TeamInvite[]    @relation("InviterUser")
  imports           ImportHistory[]

  @@map("users")
}

model Team {
  id           String            @id @default(cuid())
  sport        SportType
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  category     String?
  coachId      String
  colors       Json?
  homeField    String?
  isDeleted    Boolean           @default(false)
  logo         String?
  name         String
  season       String            @default("2024/2025")
  players      Player[]
  coach        User              @relation(fields: [coachId], references: [id], onDelete: Cascade)
  trainings    Training[]
  assistants   TeamAssistant[]
  invites      TeamInvite[]
  customFields TeamCustomField[]
  imports      ImportHistory[]
  templates    TrainingTemplate[]

  @@map("teams")
}

model Player {
  id               String             @id @default(cuid())
  firstName        String             @map("nome")
  lastName         String             @map("cognome")
  birthDate        DateTime           @map("dataNascita")
  role             String?            @map("ruolo")
  number           Int?               @map("numeroMaglia")
  status           PlayerStatus       @default(ACTIVE)
  profileImage     String?
  preferredFoot    PreferredFoot?
  technicalNotes   String?
  playerEmail      String?
  
  // Parent/Guardian info (for minors)
  parent1Name      String?
  parent1Phone     String?
  parent1Email     String?
  parent2Name      String?
  parent2Phone     String?
  parent2Email     String?
  emergencyContact String?
  emergencyPhone   String?
  
  // Medical info
  medicalNotes     String?            // Encrypted
  bloodType        String?
  allergies        String?
  medications      String?
  
  // Physical data
  height           Int?
  weight           Int?
  shirtSize        String?
  
  // Administrative
  category         String?            // For youth categories
  schoolName       String?
  fiscalCode       String?
  
  // System fields
  injuryReturnDate DateTime?
  isArchived       Boolean            @default(false)
  importedAt       DateTime?          // Track imports
  qrCode           String?            // Generated QR code
  customFields     Json?              // Custom fields as JSON
  
  teamId           String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  
  // Relations
  attendances      Attendance[]
  medicalRecords   MedicalRecord[]
  team             Team               @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([teamId, number])
  @@map("players")
}

model MedicalRecord {
  id           String            @id @default(cuid())
  playerId     String
  type         InjuryType
  title        String
  description  String?
  startDate    DateTime
  endDate      DateTime?
  estimatedEnd DateTime?
  severity     InjurySeverity    @default(MINOR)
  doctorName   String?
  documentUrl  String?           // PDF certificate
  notes        String?
  isActive     Boolean           @default(true)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  player       Player            @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@map("medical_records")
}

model TeamCustomField {
  id          String              @id @default(cuid())
  teamId      String
  name        String
  type        CustomFieldType
  options     Json?               // For dropdown options
  required    Boolean             @default(false)
  position    Int                 @default(0)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  team        Team                @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@map("team_custom_fields")
}

model ImportHistory {
  id            String            @id @default(cuid())
  teamId        String
  userId        String
  filename      String
  totalRows     Int
  successCount  Int
  errorCount    Int
  errors        Json?             // Array of error details
  canUndo       Boolean           @default(true)
  undoExpiresAt DateTime
  createdAt     DateTime          @default(now())
  team          Team              @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("import_history")
}

model Training {
  id               String         @id @default(cuid())
  type             TrainingType   @default(REGULAR)
  date             DateTime
  duration         Int            @default(90) // minutes
  location         String?
  focusAreas       String[]       @default([])
  plannedPlayers   Int?
  status           TrainingStatus @default(SCHEDULED)
  weatherForecast  Json?
  coachNotes       String?
  plan             Json?          // TrainingPlan structure
  recurringPattern Json?          // Recurrence rules
  parentTrainingId String?        // For recurring trainings
  teamId           String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  createdBy        String?
  
  attendances      Attendance[]
  team             Team           @relation(fields: [teamId], references: [id], onDelete: Cascade)
  parentTraining   Training?      @relation("RecurringTrainings", fields: [parentTrainingId], references: [id])
  childTrainings   Training[]     @relation("RecurringTrainings")
  templates        TrainingTemplate[]

  @@index([teamId, date])
  @@map("trainings")
}

model Attendance {
  id              String            @id @default(cuid())
  status          AttendanceStatus  @default(PRESENT)
  arrivalTime     DateTime?         // Orario arrivo effettivo
  departureTime   DateTime?         // Orario uscita (se anticipata)
  absenceReason   AbsenceReason?    // Motivo assenza
  isJustified     Boolean           @default(false)
  justification   String?           // Testo libero giustificazione
  markedBy        String?           // Chi ha marcato la presenza
  checkedInVia    CheckInMethod     @default(MANUAL)
  location        Json?             // Dati geolocation se presente
  note            String?           // Note libere
  playerId        String
  trainingId      String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  player          Player            @relation(fields: [playerId], references: [id], onDelete: Cascade)
  training        Training          @relation(fields: [trainingId], references: [id], onDelete: Cascade)

  @@unique([playerId, trainingId])
  @@index([trainingId, status])
  @@index([playerId, createdAt])
  @@map("attendances")
}

model Conversation {
  id        String    @id @default(cuid())
  titolo    String?
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]

  @@map("conversations")
}

model Message {
  id             String       @id @default(cuid())
  content        String
  role           String
  conversationId String
  createdAt      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Subscription {
  id                     String    @id @default(cuid())
  userId                 String    @unique
  stripeCustomerId       String?   @unique
  stripePriceId          String?
  stripeCurrentPeriodEnd DateTime?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  user                   User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model TeamAssistant {
  id          String   @id @default(cuid())
  teamId      String
  userId      String
  joinedAt    DateTime @default(now())
  permissions Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  team        Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@map("team_assistants")
}

model TeamInvite {
  id        String           @id @default(cuid())
  email     String
  teamId    String
  inviterId String
  role      TeamInviteRole   @default(ASSISTANT)
  status    TeamInviteStatus @default(PENDING)
  token     String           @unique
  message   String?
  expiresAt DateTime
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  team      Team             @relation(fields: [teamId], references: [id], onDelete: Cascade)
  inviter   User             @relation("InviterUser", fields: [inviterId], references: [id], onDelete: Cascade)

  @@unique([email, teamId])
  @@map("team_invites")
}

model TrainingTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  type        TrainingType
  duration    Int      @default(90)
  focusAreas  String[] @default([])
  plan        Json     // TrainingPlan structure
  teamId      String
  trainingId  String?
  isGlobal    Boolean  @default(false) // Team templates vs system templates
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  team        Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  training    Training? @relation(fields: [trainingId], references: [id])

  @@map("training_templates")
}

enum UserTier {
  FREE
  LEVEL1
  PREMIUM
}

enum SportType {
  CALCIO
  BASKET
  PALLAVOLO
  TENNIS
  RUGBY
  ALTRO
}

enum TeamInviteRole {
  ASSISTANT
}

enum TeamInviteStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}

enum PlayerStatus {
  ACTIVE
  INJURED
  SUSPENDED
  ARCHIVED
}

enum PreferredFoot {
  LEFT
  RIGHT
  BOTH
}

enum InjuryType {
  MUSCLE_STRAIN
  LIGAMENT_SPRAIN
  BONE_FRACTURE
  JOINT_DISLOCATION
  CONCUSSION
  BRUISE_CONTUSION
  CUT_LACERATION
  OVERUSE_INJURY
  OTHER
}

enum InjurySeverity {
  MINOR
  MODERATE
  SEVERE
}

enum CustomFieldType {
  TEXT
  NUMBER
  DATE
  DROPDOWN
  BOOLEAN
}

enum TrainingType {
  REGULAR
  MATCH_PREP
  RECOVERY
  TACTICAL
  TECHNICAL
  PHYSICAL
}

enum TrainingStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  INJURED
  EARLY_DEPARTURE
}

enum AbsenceReason {
  ILLNESS
  STUDY
  FAMILY
  INJURY
  VACATION
  DISCIPLINARY
  OTHER
}

enum CheckInMethod {
  MANUAL
  QR_CODE
  GEOLOCATION
  SELF_CHECKIN
}
